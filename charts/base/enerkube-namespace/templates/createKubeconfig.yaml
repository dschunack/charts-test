{{- if and .Values.createDefault .Values.kubeconfig.create }}
apiVersion: batch/v1
kind: Job
metadata:
  name: create-kubeconfig-{{ .Values.namespaceName }}-default
  namespace: {{ .Values.kubeconfig.jobNamespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: flux-deployer
      containers:
        - name: create-config
          image: bitnami/kubectl:1.31.2
          env: 
            - name: SECRET_NAME
              value: "default-login-serviceaccount-token"
            - name: NAMESPACE
              value: {{ .Values.namespaceName }}
            - name: CLUSTER_NAME
              value: {{ .Values.clusterName }}
            - name: KUBECFG_FILE_NAME
              value: /tmp/default-login-serviceaccount
            - name: ENDPOINT
              value: {{ .Values.clusterEndpoint }}
            - name: SERVICE_ACCOUNT_NAME
              value: default-login-serviceaccount
          command:
            - /bin/sh
            - -c
            - |
              USER_TOKEN=$(kubectl get secret "${SECRET_NAME}"  --namespace "${NAMESPACE}" -o json | jq -r '.data["token"]' | base64 -d)
              kubectl get secret "${SECRET_NAME}" --namespace "${NAMESPACE}" -o json | jq -r '.data["ca.crt"]' | base64 -d > /tmp/ca.crt
              kubectl config set-cluster "${CLUSTER_NAME}"  --kubeconfig="${KUBECFG_FILE_NAME}" --server="${ENDPOINT}" --certificate-authority=/tmp/ca.crt --embed-certs=true
              kubectl config set-credentials "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --kubeconfig="${KUBECFG_FILE_NAME}" --token="${USER_TOKEN}"
              kubectl config set-context "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --kubeconfig="${KUBECFG_FILE_NAME}" --cluster="${CLUSTER_NAME}" --user="${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --namespace="${NAMESPACE}"
              kubectl config use-context "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --kubeconfig="${KUBECFG_FILE_NAME}"
              kubectl create secret generic kubeconfig-{{ .Values.namespaceName }}-${SERVICE_ACCOUNT_NAME} --from-file=kubeconfig="${KUBECFG_FILE_NAME}" -n {{ .Values.kubeconfig.namespace | default .Values.namespaceName }} -o yaml --dry-run | kubectl apply -f -
      restartPolicy: OnFailure
{{- end }}
{{- if and .Values.createReadOnly .Values.kubeconfig.create  }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-kubeconfig-{{ .Values.namespaceName }}-read-only
  namespace: {{ .Values.kubeconfig.jobNamespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: flux-deployer
      containers:
        - name: create-config
          image: bitnami/kubectl:1.31.2
          env: 
            - name: SECRET_NAME
              value: "read-only-token"
            - name: NAMESPACE
              value: {{ .Values.namespaceName }}
            - name: CLUSTER_NAME
              value: {{ .Values.clusterName }}
            - name: KUBECFG_FILE_NAME
              value: /tmp/read-only
            - name: ENDPOINT
              value: {{ .Values.clusterEndpoint }}
            - name: SERVICE_ACCOUNT_NAME
              value: read-only
          command:
            - /bin/sh
            - -c
            - |
              USER_TOKEN=$(kubectl get secret "${SECRET_NAME}"  --namespace "${NAMESPACE}" -o json | jq -r '.data["token"]' | base64 -d)
              kubectl get secret "${SECRET_NAME}" --namespace "${NAMESPACE}" -o json | jq -r '.data["ca.crt"]' | base64 -d > /tmp/ca.crt
              kubectl config set-cluster "${CLUSTER_NAME}"  --kubeconfig="${KUBECFG_FILE_NAME}" --server="${ENDPOINT}" --certificate-authority=/tmp/ca.crt --embed-certs=true
              kubectl config set-credentials "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --kubeconfig="${KUBECFG_FILE_NAME}" --token="${USER_TOKEN}"
              kubectl config set-context "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --kubeconfig="${KUBECFG_FILE_NAME}" --cluster="${CLUSTER_NAME}" --user="${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --namespace="${NAMESPACE}"
              kubectl config use-context "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --kubeconfig="${KUBECFG_FILE_NAME}"
              kubectl create secret generic kubeconfig-{{ .Values.namespaceName }}-${SERVICE_ACCOUNT_NAME} --from-file=kubeconfig="${KUBECFG_FILE_NAME}" -n {{ .Values.kubeconfig.namespace | default .Values.namespaceName }} -o yaml --dry-run | kubectl apply -f -
      restartPolicy: OnFailure
{{- end }}
{{- if and .Values.createPrivileged .Values.kubeconfig.create }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-kubeconfig-{{ .Values.namespaceName }}-privileged
  namespace: {{ .Values.kubeconfig.jobNamespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: flux-deployer
      containers:
        - name: create-config-privileged
          image: bitnami/kubectl:1.31.2
          env: 
            - name: SECRET_NAME
              value: "privileged-token"
            - name: NAMESPACE
              value: {{ .Values.namespaceName }}
            - name: CLUSTER_NAME
              value: {{ .Values.clusterName }}
            - name: KUBECFG_FILE_NAME
              value: /tmp/privileged
            - name: ENDPOINT
              value: {{ .Values.clusterEndpoint }}
            - name: SERVICE_ACCOUNT_NAME
              value: privileged
          command:
            - /bin/sh
            - -c
            - |
              USER_TOKEN=$(kubectl get secret "${SECRET_NAME}"  --namespace "${NAMESPACE}" -o json | jq -r '.data["token"]' | base64 -d)
              kubectl get secret "${SECRET_NAME}" --namespace "${NAMESPACE}" -o json | jq -r '.data["ca.crt"]' | base64 -d > /tmp/ca.crt
              kubectl config set-cluster "${CLUSTER_NAME}"  --kubeconfig="${KUBECFG_FILE_NAME}" --server="${ENDPOINT}" --certificate-authority=/tmp/ca.crt --embed-certs=true
              kubectl config set-credentials "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --kubeconfig="${KUBECFG_FILE_NAME}" --token="${USER_TOKEN}"
              kubectl config set-context "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --kubeconfig="${KUBECFG_FILE_NAME}" --cluster="${CLUSTER_NAME}" --user="${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --namespace="${NAMESPACE}"
              kubectl config use-context "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" --kubeconfig="${KUBECFG_FILE_NAME}"
              kubectl create secret generic kubeconfig-{{ .Values.namespaceName }}-${SERVICE_ACCOUNT_NAME} --from-file=kubeconfig="${KUBECFG_FILE_NAME}" -n {{ .Values.kubeconfig.namespace | default .Values.namespaceName }} -o yaml --dry-run | kubectl apply -f -
      restartPolicy: OnFailure
{{- end }}
