{{- $instanceProfile := .Values.instanceProfile | required ".Values.instanceProfile is required." -}}
{{- $clusterName := .Values.clusterName | required ".Values.clusterName is required." -}}

{{- range $nodeclass := .Values.NodeClasses.Linux }}
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: {{ .nodePoolName }}
  labels:
    {{- include "karpenter-nodepool.labels" $ | nindent 4 }}
  annotations:
    kubernetes.io/description: "EC2NodeClass for {{ .name }}"
spec:
  # Required, resolves a default ami and userdata
  amiSelectorTerms:
    - alias: "{{ .amiFamily }}@latest"

  # Required, discovers subnets to attach to instances
  # Each term in the array of subnetSelectorTerms is ORed together
  # Within a single term, all conditions are ANDed
  subnetSelectorTerms:
    # Select on any subnet that has the "karpenter.sh/discovery: ${CLUSTER_NAME}" 
    # AND the "environment: test" tag OR any subnet with ID "subnet-09fa4a0a8f233a921"
    - tags:
        karpenter.sh/discovery: "enerkube-owned"
        kubernetes.io/cluster/{{ $clusterName }}: owned
  # Required, discovers security groups to attach to instances
  # Each term in the array of securityGroupSelectorTerms is ORed together
  # Within a single term, all conditions are ANDed
  securityGroupSelectorTerms:
    # Select on any security group that has both the "karpenter.sh/discovery: ${CLUSTER_NAME}" tag 
    # AND the "environment: test" tag OR any security group with the "my-security-group" name 
    # OR any security group with ID "sg-063d7acfb4b06c82c"
    - tags:
        karpenter.sh/discovery: "{{ $clusterName }}"
  instanceProfile: "{{ $instanceProfile }}"
  tags:
    Name: {{ $clusterName }}-instance-{{ .name }}
    OWNER: enerkube-Team
    Application: EKS
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: {{ .volumeSize }}
        volumeType: {{ .volumeType }}
        deleteOnTermination: true
        encrypted: true
  detailedMonitoring: true
  associatePublicIPAddress: {{ .internetFacing }}
  kubelet:
    {{- if .podCidr }}
    maxPods: 110 {{ end }}
    systemReserved:
      cpu: 250m
      memory: 450Mi
      ephemeral-storage: 1Gi
    kubeReserved:
      cpu: 250m
      memory: 450Mi
      ephemeral-storage: 1Gi
    evictionHard:
      memory.available: 5%
      nodefs.available: 10%
      nodefs.inodesFree: 10%
    evictionSoft:
      memory.available: 7%
      nodefs.available: 15%
      nodefs.inodesFree: 15%
    evictionSoftGracePeriod:
      memory.available: 1m
      nodefs.available: 1m30s
      nodefs.inodesFree: 2m
    evictionMaxPodGracePeriod: 60
    imageGCHighThresholdPercent: 85
    imageGCLowThresholdPercent: 80
    cpuCFSQuota: true
  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required
  userData: |  
  {{- if .internetFacing }}
    MIME-Version: 1.0
    Content-Type: multipart/mixed; boundary="BOUNDARY"

    --BOUNDARY
    Content-Type: text/x-shellscript; charset="us-ascii"

    #!/bin/bash
    echo "Running a custom user data script"

    {{- if .awsChina }}
    mkdir -p /etc/containerd/certs.d/docker.io /etc/containerd/certs.d/gcr.io /etc/containerd/certs.d/quay.io /etc/containerd/certs.d/registry.k8s.io

    cat > /etc/containerd/certs.d/docker.io/hosts.toml  <<EOF
    server = "docker.io"
    [host."https://dockerhub.azk8s.cn/v2"]
      capabilities = ["pull", "resolve"]
      skip_verify = true
      override_path = true
    EOF

    cat > /etc/containerd/certs.d/gcr.io/hosts.toml  <<EOF
    server = "gcr.io"
    [host."https://gcr.azk8s.cn/v2"]
      capabilities = ["pull", "resolve"]
      skip_verify = true
      override_path = true
    EOF

    cat > /etc/containerd/certs.d/quay.io/hosts.toml  <<EOF
    server = "quay.io"
    [host."https://quay.azk8s.cn/v2"]
      capabilities = ["pull", "resolve"]
      skip_verify = true
      override_path = true
    EOF


    cat > /etc/containerd/certs.d/registry.k8s.io/hosts.toml  <<EOF
    server = "registry.k8s.io"
    [host."https://registry.cn-hangzhou.aliyuncs.com/v2/google_containers"]
      capabilities = ["pull", "resolve"]
      skip_verify = true
      override_path = true
    [host."https://registry.cn-hangzhou.aliyuncs.com/v2"]
      capabilities = ["pull", "resolve"]
      skip_verify = true
      override_path = true
    [host."https://k8sgcr.azk8s.cn/v2"]
      capabilities = ["pull", "resolve"]
      skip_verify = true
      override_path = true
    EOF

    # reload doesn't work correct. Restart is needed to use mirror
    systemctl restart containerd
    {{ end }}

  {{ else }}
    MIME-Version: 1.0
    Content-Type: multipart/mixed; boundary="BOUNDARY"

    --BOUNDARY
    Content-Type: text/x-shellscript; charset="us-ascii"

    #!/bin/bash
    echo "Running a custom user data script"

    # Add Conti Certs
    update-ca-trust enable

    cat > /etc/pki/ca-trust/source/anchors/Conti_LDAP_Root_CA.crt <<EOF
    -----BEGIN CERTIFICATE-----
    MIIG5jCCBM6gAwIBAgIBADANBgkqhkiG9w0BAQUFADB7MQswCQYDVQQGEwJERTEV
    MBMGA1UECBMMTG93ZXIgU2F4b255MRAwDgYDVQQHEwdIYW5vdmVyMRcwFQYDVQQK
    Ew5Db250aW5lbnRhbCBBRzEqMCgGA1UECxMhQ29udGluZW50YWwgQ29ycG9yYXRl
    IElUIFNlY3VyaXR5MB4XDTA3MDkxMzA4NTYxMFoXDTM3MDkwNTA4NTYxMFowezEL
    MAkGA1UEBhMCREUxFTATBgNVBAgTDExvd2VyIFNheG9ueTEQMA4GA1UEBxMHSGFu
    b3ZlcjEXMBUGA1UEChMOQ29udGluZW50YWwgQUcxKjAoBgNVBAsTIUNvbnRpbmVu
    dGFsIENvcnBvcmF0ZSBJVCBTZWN1cml0eTCCAiIwDQYJKoZIhvcNAQEBBQADggIP
    ADCCAgoCggIBAK7nh/OgtCrrqOTKGV+SYW0XwzSBzHIS1rJ6vCJ/wocXLIi4SxN8
    CnoC4gF2F0NnlL8Of2UZQMcE2MWXkkq5W6J9Z2oIGSBrw6TssrcCu5SiMDfn/FhP
    RjzWeCq/iNVS1Rs/AbWFeF2MuTy83awWhxHvU3lVGCo/lrOa7PmeZ1SJEC32JriM
    l/EmiOQnW2fL7OCdHqeaskGm+6CH/GRFz8sUJqzwdkeTHD/nm+IAYnr2NuUIXdbL
    84T0zO3Mi8YtcwxjqWLtClTUTkB8SxqZqT+djYJe9AGJXLIQBAluzcpjibC7uVeZ
    LWndSNOMRCC2P4ub6UarNC28N4NLONrgBs8IKED5+bDgaDnFafrNcH2lEJHxTeeu
    d5HWCPgpbLPBcNVqXGgEEalMa01QTIhbYbKMZk6ncyN4msSlJhGgzfqAFJ50Z2mt
    lujLQaV1HJBV43CSfRYgY55j4TRc47EzmCEz/dQ3zPOSSTYZgf4uphNlTIDZWlzr
    WFvlJqyx1uLmuAjP+zE9as/wW8C0R+bRih7hWJIut1JdfrYk0o7q+0yXoTvzv40d
    j4bN2lNB6vLZgP+Oo3j3RwuFY2AY9Msjwa6SMv+oQ63pquHm4bl97dKW9iKkLR0g
    Y85KDJxpmqG3b3RaYs/369BeukyME1WIttH7FQSl0i7lO7bmFiJM/yRzAgMBAAGj
    ggFzMIIBbzAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E
    FgQUKYzkfUozwZ6JaPMdOvjPs3+GfrEwgaUGA1UdIwSBnTCBmoAUKYzkfUozwZ6J
    aPMdOvjPs3+GfrGhf6R9MHsxCzAJBgNVBAYTAkRFMRUwEwYDVQQIEwxMb3dlciBT
    YXhvbnkxEDAOBgNVBAcTB0hhbm92ZXIxFzAVBgNVBAoTDkNvbnRpbmVudGFsIEFH
    MSowKAYDVQQLEyFDb250aW5lbnRhbCBDb3Jwb3JhdGUgSVQgU2VjdXJpdHmCAQAw
    EQYJYIZIAYb4QgEBBAQDAgAHMDgGCWCGSAGG+EIBDQQrFilDb250aW5lbnRhbCBB
    RyBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eTA4BggrBgEFBQcBAQQsMCowKAYI
    KwYBBQUHMAKGHGh0dHA6Ly93d3cuY29udGktb25saW5lLmNvbS8wDQYJKoZIhvcN
    AQEFBQADggIBAIBpMzT2ATipj60nWaKrLaoDVOCBmnoJmRB9x9paP3+TamF+UJnT
    z/y18gzkUPXeLhhSLCgu9j817nz61F1pUQDRJ8VWGtBIt/tV/xdAWP0mQ3vPD6Po
    6ocYP+2DZHlAHnyMH9UX9aYMXhWZPuxBFpWJVyG+eaqHd8RCJJeMYtnlo+DhCpIR
    TOQ4FEA+BdrMP7IO9OWt1HnZe38VYikhu/riQ6lTRVN6cyRwsdQh/t64V6uYi6If
    l4FNpEOZzAbWkn1RvW1oIwmiuRX1PemUsR858Ys+O5wxlvCQBtKCAgqyHCCPO7aY
    1+LlQ9wAu3FeEMU9i8YvzstV+76HITrxQDn8lE/D5ccx0gPIzfEZRHSVuwX2JCdV
    MukUpOsoF/B4Q8daGl+55yEJse6n7qXOsoyd5cc1UUGItqdemDSM73s0DYIUbJmL
    X48ygRMS6ZSM5lFdneuK6EWJcensanfLJF1i4fwbwvWpWNNpJeXK4Gun1HUkHPEu
    tdhHyfso284mJEl8afLTyVRUsj6rb1jaOrTACvDIBYOsqLDJSok6vl1fvlRQ8Klf
    mgiw/c8fh0ysah5NcC2iOCjmK/ycYMhwB5UEX0i26mvwJjDwSGsOCmQvD18Qvvj5
    29/79eTJ65C9yO77SgpapwezUNKhdCk3vL049aG94YLW07apBxQ9RpKA
    -----END CERTIFICATE-----
    EOF

    update-ca-trust extract

    mkdir -p /etc/containerd/certs.d/docker.io /etc/containerd/certs.d/gcr.io /etc/containerd/certs.d/quay.io /etc/containerd/certs.d/public.ecr.aws /etc/containerd/certs.d/registry.k8s.io

    cat > /etc/containerd/certs.d/docker.io/hosts.toml  <<EOF
    server = "docker.io"

    [host."https://common-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://docker.io"]
      capabilities = ["pull", "resolve"]
    EOF

    cat > /etc/containerd/certs.d/gcr.io/hosts.toml  <<EOF
    server = "gcr.io"

    [host."https://common-gcr-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://gcr.io"]
      capabilities = ["pull", "resolve"]
    EOF

    cat > /etc/containerd/certs.d/quay.io/hosts.toml  <<EOF
    server = "quay.io"

    [host."https://common-quay-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://quay.io"]
      capabilities = ["pull", "resolve"]
    EOF

    cat > /etc/containerd/certs.d/public.ecr.aws/hosts.toml  <<EOF
    server = "public.ecr.aws"

    [host."https://common-aws-ecr-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://public.ecr.aws"]
      capabilities = ["pull", "resolve"]
    EOF

    cat > /etc/containerd/certs.d/registry.k8s.io/hosts.toml  <<EOF
    server = "registry.k8s.io"
    
    [host."https://am-enp-common-registry-k8s-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://registry.k8s.io"]
      capabilities = ["pull", "resolve"]
    EOF

    {{- if eq .nodePoolName "al2-gpu" }}
    cat <<EOF > /etc/eks/containerd/containerd-config.toml
    imports = ["/etc/containerd/config.d/*.toml"]
    root = "/var/lib/containerd"
    state = "/run/containerd"
    version = 2

    [grpc]
      address = "/run/containerd/containerd.sock"

    [plugins]

      [plugins."io.containerd.grpc.v1.cri"]
        sandbox_image = "602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/pause:3.5"

        [plugins."io.containerd.grpc.v1.cri".cni]
          bin_dir = "/opt/cni/bin"
          conf_dir = "/etc/cni/net.d"

        [plugins."io.containerd.grpc.v1.cri".containerd]
          default_runtime_name = "nvidia"
          discard_unpacked_layers = false

          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]

            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia]
              runtime_type = "io.containerd.runc.v2"

              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia.options]
                BinaryName = "/usr/bin/nvidia-container-runtime"
                SystemdCgroup = true

            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
              runtime_type = "io.containerd.runc.v2"

              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                SystemdCgroup = true
        [plugins."io.containerd.grpc.v1.cri".registry]
          config_path = "/etc/containerd/certs.d:/etc/docker/certs.d"
    EOF
    
    {{ end }}
    # reload doesn't work correct. Restart is needed to use mirror
    systemctl restart containerd

  {{ end }}

{{- if .customuserdata }}
{{ .customuserdata | toString | indent 4 }}
{{ end }}

    --BOUNDARY--
{{ end }}
