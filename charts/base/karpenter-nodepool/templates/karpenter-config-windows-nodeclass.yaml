{{- $instanceWinProfile := .Values.instanceWinProfile | required ".Values.instanceWinProfile is required." -}}
{{- $clusterName := .Values.clusterName | required ".Values.clusterName is required." -}}

{{- range $nodeclass := .Values.NodeClasses.Windows }}
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: {{ .nodePoolName }}
  annotations:
    kubernetes.io/description: "EC2NodeClass for {{ .name }}"
  labels:
    {{- include "karpenter-nodepool.labels" $ | nindent 4 }}
spec:
  # Required, resolves a default ami and userdata
  amiSelectorTerms:
    - alias: "{{ .amiFamily }}@latest"

  # Required, discovers subnets to attach to instances
  # Each term in the array of subnetSelectorTerms is ORed together
  # Within a single term, all conditions are ANDed
  subnetSelectorTerms:
    # Select on any subnet that has the "karpenter.sh/discovery: ${CLUSTER_NAME}" 
    # AND the "environment: test" tag OR any subnet with ID "subnet-09fa4a0a8f233a921"
    - tags:
        karpenter.sh/discovery: "enerkube-owned"
        kubernetes.io/cluster/{{ $clusterName }}: owned

  # Required, discovers security groups to attach to instances
  # Each term in the array of securityGroupSelectorTerms is ORed together
  # Within a single term, all conditions are ANDed
  securityGroupSelectorTerms:
    # Select on any security group that has both the "karpenter.sh/discovery: ${CLUSTER_NAME}" tag 
    # AND the "environment: test" tag OR any security group with the "my-security-group" name 
    # OR any security group with ID "sg-063d7acfb4b06c82c"
    - tags:
        karpenter.sh/discovery: "{{ $clusterName }}"
  instanceProfile: "{{ $instanceWinProfile }}"
  tags:
    Name: {{ $clusterName }}-instance-{{ .name }}
    OWNER: enerkube-Team
    Application: EKS
  blockDeviceMappings:
    - deviceName: /dev/sda1
      ebs:
        volumeSize: {{ .volumeSize }}
        volumeType: {{ .volumeType }}
        deleteOnTermination: true
        encrypted: true
  detailedMonitoring: true
  associatePublicIPAddress: {{ .internetFacing }}
  kubelet:
    systemReserved:
      cpu: 500m
      memory: 800Mi
      ephemeral-storage: 1Gi
    kubeReserved:
      cpu: 500m
      memory: 800Mi
      ephemeral-storage: 1Gi
    evictionHard:
      memory.available: 7%
      nodefs.available: 10%
      nodefs.inodesFree: 10%
    evictionSoft:
      memory.available: 10%
      nodefs.available: 15%
      nodefs.inodesFree: 15%
    evictionSoftGracePeriod:
      memory.available: 1m
      nodefs.available: 1m30s
      nodefs.inodesFree: 2m
    evictionMaxPodGracePeriod: 60
    imageGCHighThresholdPercent: 85
    imageGCLowThresholdPercent: 80
    cpuCFSQuota: true
  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required
  userData: |
    {{- if .internetFacing }}
    [string]$EKSBinDir = "$env:ProgramFiles\Amazon\EKS"
    [string]$EKSBootstrapScriptName = 'Start-EKSBootstrap.ps1'
    [string]$EKSBootstrapScriptFile = "$EKSBinDir\$EKSBootstrapScriptName"

    Invoke-RestMethod -Uri https://windows-debug-logs.s3.eu-central-1.amazonaws.com/enerkube_Start-EKSBootstrap.ps1 -OutFile $EKSBinDir\$EKSBootstrapScriptName

    echo on

    echo "Remove curl alias"

    Remove-Item alias:curl

    echo "Disable Defender"

    Set-MpPreference -DisableRealtimeMonitoring $true

    {{- if contains "2019" .nodePoolName }}
    (Get-Content $EKSBootstrapScriptFile).replace('"--proxy-mode=kernelspace",', '"--proxy-mode=kernelspace", "--feature-gates WinDSR=true", "--enable-dsr",') | Set-Content $EKSBootstrapScriptFile
    {{ end }}

    {{ else }}
    [string]$EKSBinDir = "$env:ProgramFiles\Amazon\EKS"
    [string]$EKSBootstrapScriptName = 'Start-EKSBootstrap.ps1'
    [string]$EKSBootstrapScriptFile = "$EKSBinDir\$EKSBootstrapScriptName"
    
    echo on

    echo "Remove curl alias"

    Remove-Item alias:curl

    echo "Disable Defender"

    Set-MpPreference -DisableRealtimeMonitoring $true

    echo "Install Conti CA CERT"

    Invoke-RestMethod -Uri http://ca.enercity.de/enercityrootcacert.pem -OutFile enercityrootcacert.pem
    Import-Certificate -FilePath enercityrootcacert.pem -CertStoreLocation Cert:\\LocalMachine\\Root
    
    {{- if contains "2019" .nodePoolName }}
    (Get-Content $EKSBootstrapScriptFile).replace('"--proxy-mode=kernelspace",', '"--proxy-mode=kernelspace", "--feature-gates WinDSR=true", "--enable-dsr",') | Set-Content $EKSBootstrapScriptFile
    {{ end }}

    echo "Add containerd mirrors"

    mkdir -p "C:\Program Files\containerd\certs.d\docker.io"
    mkdir -p "C:\Program Files\containerd\certs.d\gcr.io"
    mkdir -p "C:\Program Files\containerd\certs.d\quay.io"
    mkdir -p "C:\Program Files\containerd\certs.d\mcr.microsoft.com"
    mkdir -p "C:\Program Files\containerd\certs.d\public.ecr.aws"
    mkdir -p "C:\Program Files\containerd\certs.d\registry.k8s.io"

    $contentdocker = @"
    server = "docker.io"
    [host."https://common-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://docker.io"]
      capabilities = ["pull", "resolve"]
    "@
    Set-Content -Path "C:\Program Files\containerd\certs.d\docker.io\hosts.toml" -Value $contentdocker

    $contentgcr = @"
    server = "gcr.io"
    [host."https://common-gcr-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://gcr.io"]
      capabilities = ["pull", "resolve"]
    "@
    Set-Content -Path "C:\Program Files\containerd\certs.d\gcr.io\hosts.toml" -Value $contentgcr

    $contentquay = @"
    server = "quay.io"
    [host."https://common-quay-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://quay.io"]
      capabilities = ["pull", "resolve"]
    "@
    Set-Content -Path "C:\Program Files\containerd\certs.d\quay.io\hosts.toml" -Value $contentquay

    $contentmcr = @"
    server = "mcr.microsoft.com"
    [host."https://common-microsoft-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://mcr.microsoft.com"]
      capabilities = ["pull", "resolve"]
    "@
    Set-Content -Path "C:\Program Files\containerd\certs.d\mcr.microsoft.com\hosts.toml" -Value $contentmcr

    $contentecr = @"
    server = "public.ecr.aws"
    [host."https://common-aws-ecr-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://public.ecr.aws"]
      capabilities = ["pull", "resolve"]
    "@
    Set-Content -Path "C:\Program Files\containerd\certs.d\public.ecr.aws\hosts.toml" -Value $contentecr

    $contentk8s = @"
    server = "registry.k8s.io"
    [host."https://am-enp-common-registry-k8s-docker-r.eu.artifactory.conti.de"]
      capabilities = ["pull", "resolve"]
    [host."https://registry.k8s.io"]
      capabilities = ["pull", "resolve"]
    "@
    Set-Content -Path "C:\Program Files\containerd\certs.d\registry.k8s.io\hosts.toml" -Value $contentk8s


    $filePath = "C:\Program Files\containerd\config.toml"
    $searchString = 'config_path = ""'
    $replaceString = 'config_path = "C:\\Program Files\\containerd\\certs.d"'

    (Get-Content -Path $filePath) | ForEach-Object {
        $_ -replace [regex]::Escape($searchString), $replaceString
    } | Set-Content -Path $filePath

    Restart-Service containerd
    {{ end }}
{{- if .customuserdata }}
{{ .customuserdata | toString | indent 4 }}
{{ end }}
{{ end }}
